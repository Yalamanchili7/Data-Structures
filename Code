#include<stdio.h> 
#include<stdlib.h> 
typedef struct node 
{ 
 int data; 
 struct node *next; 
}node; 
typedef struct row 
{ 
 node *n; 
}row; 
typedef struct matrix 
{ 
 row r[7]; 
}matrix; 
void append(row* head, int new_data) 
{ 
node* newnode = (node*) malloc(sizeof(node)); 
newnode->data=new_data; 
newnode->next=head->n; 
head->n=newnode; 
} 
void insert(matrix *r1,int key) 
{ 
 int i=key/7; 
 append(&r1->r[i],key); 
11 
} 
void print(row *r) 
{ 
 node *tmp=r->n; 
 while(tmp!=NULL) 
 { 
 printf("%d ",tmp->data); 
 tmp=tmp->next; 
 } 
 printf("\n"); 
} 
void hashprint(matrix *a) 
{ 
 int i; 
 for(i=0;i<7;i++) 
 { 
 printf("Row %d: ",i+1); 
 print(&a->r[i]); 
 } 
} 
void init(row *r) 
{ 
r->n=NULL; 
} 
void in(matrix *a) 
{ 
 int i=0; 
 while(i<7) 
 { 
 init(&a->r[i]); 
 i++; 
12 
 } 
} 
void scalar(row *r,int e) 
{ 
 node *tmp=r->n; 
 
 while(tmp!=NULL) 
 { 
 printf("%d ",(tmp->data)*e); 
 tmp=tmp->next; 
 } 
 printf("\n"); 
} 
void hashscalar(matrix *a,int e) 
{ 
 int i; 
 printf("Scalar product of given matrix with %d is:\n",e); 
 for(i=0;i<7;i++) 
 { 
 scalar(&a->r[i],e); 
 } 
} 
void pro(row *a, row *b) 
{ 
 node *t1=a->n; 
 node *t2=b->n; 
 while((t1!=NULL)&&(t2!=NULL)) 
 { 
 printf("%d ",(t1->data)*(t2->data)); 
 t1=t1->next; 
 t2=t2->next; 
 } 
13 
 printf("\n"); 
} 
void hashpro(matrix *a,matrix *b) 
{ 
 printf("Product of 2 matrices:\n"); 
 int i; 
 for(i=0;i<7;i++) 
 { 
 pro(&a->r[i],&b->r[i]); 
 } 
} 
void add(row *a, row *b) 
{ 
 node *t1=a->n; 
 node *t2=b->n; 
 while((t1!=NULL)&&(t2!=NULL)) 
 { 
 printf("%d ",(t1->data)+(t2->data)); 
 t1=t1->next; 
 t2=t2->next; 
 } 
 printf("\n"); 
} 
void hashadd(matrix *a,matrix *b) 
{ 
printf("Addition of 2 square matrices:\n"); 
 int i; 
 for(i=0;i<7;i++) 
 { 
 add(&a->r[i],&b->r[i]); 
 } 
14 
} 
void sub(row *a, row *b) 
{ 
 node *t1=a->n; 
 node *t2=b->n; 
 while((t1!=NULL)&&(t2!=NULL)) 
 { 
 printf("%d ",(t1->data)-(t2->data)); 
 t1=t1->next; 
 t2=t2->next; 
 } 
 printf("\n"); 
} 
void hashsub(matrix *a,matrix *b) 
{ 
printf("Subtraction of 2 square matrices:\n"); 
 int i; 
 for(i=0;i<7;i++) 
 { 
 sub(&a->r[i],&b->r[i]); 
 } 
} 
#include<stdio.h> 
#include<stdlib.h> 
int main() 
{ 
 matrix a,b; 
 int i; 
 in(&a); 
 in(&b); 
15 
 for(i=0;i<7;i++) 
 { 
 insert(&a,i*5); 
 insert(&b,i*3); 
 } 
 printf("Matrix A:\n"); 
 hashprint(&a); 
 hashscalar(&a,5); 
 printf("Matrix B:\n"); 
 hashprint(&b); 
 hashscalar(&b,3); 
 hashpro(&a,&b); 
 hashadd(&a,&b); 
 hashsub(&a,&b); 
 return 0; 
} 
4.Polynomial ADT 
#include <stdio.h> 
#include <stdlib.h> 
struct poly 
{ 
int coeff; 
int exp; 
struct poly *next; 
}*head1=NULL,*head2=NULL,*head3=NULL,*head4=NULL,*temp,*ptr; 
void create(); 
void makenode(int,int); 
struct poly *insertend(struct poly *); 
void display(struct poly *); 
struct poly *addtwopoly(struct poly *,struct poly *,struct poly *); 
16 
struct poly *subtwopoly(struct poly *,struct poly *,struct poly *); 
struct poly *multwopoly(struct poly *,struct poly *,struct poly *); 
struct poly *dispose(struct poly *); 
int search(struct poly *,int); 
void main() 
{ 
int ch,coefficient,exponent; 
int listno; 
while(1) 
{ 
printf("Menu"); 
printf("1.Create First Polynomial."); 
printf("2. Display First Polynomial."); 
printf("3. Create Second Polynomial."); 
printf("4. Display Second Polynomial."); 
printf("5. Add Two Polynomials."); 
printf("6. Display Result of Addition."); 
printf("7. Subtract Two Polynomials."); 
printf("8. Display Result of Subtraction."); 
printf("9. Multiply Two Polynomials."); 
printf("10. Display Result of Product."); 
printf("11. Dispose List."); 
printf("12. Exit"); 
printf("Enter your choice?"); 
scanf("%d",&ch); 
switch(ch) 
{ 
case 1: 
printf("Generating first polynomial:"); 
17 
printf("Enter coefficient?"); 
scanf("%d",&coefficient); 
printf("Enter exponent?"); 
scanf("%d",&exponent); 
makenode(coefficient,exponent); 
head1 = insertend(head1); 
break; 
case 2: 
display(head1); 
break; 
case 3: 
printf("Generating second polynomial:"); 
printf("Enter coefficient?"); 
scanf("%d",&coefficient); 
printf("Enter exponent?"); 
scanf("%d",&exponent); 
makenode(coefficient,exponent); 
head2 = insertend(head2); 
break; 
case 4: 
display(head2); 
break; 
case 5: 
printf("Disposing result list."); 
head3=dispose(head3); 
head3=addtwopoly(head1,head2,head3); 
printf("Addition successfully done!"); 
break; 
case 6: 
display(head3); 
18 
break; 
case 7: 
head3=dispose(head3); 
head3=subtwopoly(head1,head2,head3); 
printf("Subtraction successfully done!"); 
break; 
case 8: 
display(head3); 
break; 
case 9: 
head3=dispose(head3); 
head4=dispose(head4); 
head4=multwopoly(head1,head2,head3); 
break; 
case 10: 
display(head4); 
break; 
case 11: 
printf("Enter list number to dispose(1 to 4)?"); 
scanf("%d",&listno); 
if(listno==1) 
head1=dispose(head1); 
else if(listno==2) 
head2=dispose(head2); 
else if(listno==3) 
head3=dispose(head3); 
else if(listno==4) 
head4=dispose(head4); 
else 
printf("Invalid number specified."); 
19 
break; 
case 12: 
exit(0); 
default: 
printf("Invalid Choice!"); 
break; 
} 
} 
} 
void create() 
{ 
ptr=(struct poly *)malloc(sizeof(struct poly)); 
if(ptr==NULL) 
{ 
printf("Memory Allocation Error!"); 
exit(1); 
} 
} 
void makenode(int c,int e) 
{ 
create(); 
ptr->coeff = c; 
ptr->exp = e; 
ptr->next = NULL; 
} 
20 
struct poly *insertend(struct poly *head) 
{ 
if(head==NULL) 
head = ptr; 
else 
{ 
temp=head; 
while(temp->next != NULL) 
temp = temp->next; 
temp->next = ptr; 
} 
return head; 
} 
void display(struct poly *head) 
{ 
if(head==NULL) 
printf("List is empty!"); 
else 
{ 
temp=head; 
while(temp!=NULL) 
{ 
printf("(%d,%d)->",temp->coeff,temp->exp); 
temp=temp->next; 
} 
printf("bb "); 
} 
} 
21 
struct poly *addtwopoly(struct poly *h1,struct poly *h2,struct poly *h3) 
{ 
/* 
(5,3)->(6,1) + (7,3)->(9,2) = (12,3)->(6,1)->(9,2) 
*/ 
struct poly *temp1,*temp2,*temp3; 
temp1=h1; 
temp2=h2; 
while(temp1!=NULL || temp2!=NULL) 
{ 
if(temp1->exp==temp2->exp) 
{ 
makenode(temp1->coeff+temp2->coeff,temp1->exp); 
h3=insertend(h3); 
} 
else 
{ 
makenode(temp1->coeff,temp1->exp); 
h3=insertend(h3); 
makenode(temp2->coeff,temp2->exp); 
h3=insertend(h3); 
} 
temp1=temp1->next; 
temp2=temp2->next; 
} 
if(temp1==NULL && temp2!=NULL) 
{ 
while(temp2!=NULL) 
{ 
22 
makenode(temp2->coeff,temp2->exp); 
h3=insertend(h3); 
temp2=temp2->next; 
} 
} 
if(temp2==NULL && temp1!=NULL) 
{ 
while(temp1!=NULL) 
{ 
makenode(temp2->coeff,temp2->exp); 
h3=insertend(h3); 
temp1=temp1->next; 
} 
} 
return h3; 
} 
struct poly *subtwopoly(struct poly *h1,struct poly *h2,struct poly *h3) 
{ 
/* 
(5,3)->(6,1) â€“ (7,3)->(9,2) = (-2,3)+(6,1)-(9,2) 
*/ 
struct poly *temp1,*temp2,*temp3; 
temp1=h1; 
temp2=h2; 
while(temp1!=NULL || temp2!=NULL) 
{ 
if(temp1->exp==temp2->exp) 
{ 
makenode(temp1->coeff-temp2->coeff,temp1->exp); 
23 
h3=insertend(h3); 
} 
else 
{ 
makenode(temp1->coeff,temp1->exp); 
h3=insertend(h3); 
makenode(-temp2->coeff,temp2->exp); 
h3=insertend(h3); 
} 
temp1=temp1->next; 
temp2=temp2->next; 
} 
if(temp1==NULL && temp2!=NULL) 
{ 
while(temp2!=NULL) 
{ 
makenode(temp2->coeff,temp2->exp); 
h3=insertend(h3); 
temp2=temp2->next; 
} 
} 
if(temp2==NULL && temp1!=NULL) 
{ 
while(temp1!=NULL) 
{ 
makenode(-temp2->coeff,temp2->exp); 
h3=insertend(h3); 
temp1=temp1->next; 
} 
} 
24 
return h3; 
} 
struct poly *multwopoly(struct poly *h1,struct poly *h2,struct poly *h3) 
{ 
/* 
h1=(5,3)->(6,1) * h2=(7,3)->(9,2) 
(5,3)->(7,3),(9,2) = (35,6),(45,5) 
(6,1)->(7,3),(9,2) = (42,4),(54,3) 
h3->(35,6)->(45,5)->(42,4)->(54,3) 
(35,6)+(45,5)+(42,4)+(54,3)=Result 
*/ 
int res=0; 
struct poly *temp1,*temp2,*temp3; 
printf("Displaying First Polynomial:"); 
display(h1); 
printf("Displaying Second Polynomial:ntt"); 
display(h2); 
temp1=h1; 
while(temp1!=NULL) 
{ 
temp2=h2; 
while(temp2!=NULL) 
{ 
makenode(temp1->coeff*temp2->coeff,temp1->exp+temp2->exp); 
h3=insertend(h3); 
temp2=temp2->next; 
} 
temp1=temp1->next; 
25 
} 
printf("nDisplaying Initial Result of Product:ntt"); 
display(h3); 
temp1=h3; 
while(temp1!=NULL) 
{temp2=temp1->next; 
res=0; 
while(temp2!=NULL) 
{ 
if(temp1->exp==temp2->exp) 
res += temp2->coeff; 
temp2=temp2->next; 
} 
if(search(head4,temp1->exp)==1) 
{ 
makenode(res+temp1->coeff,temp1->exp); 
head4=insertend(head4); 
} 
temp1=temp1->next; 
} 
return head4; 
} 
int search(struct poly *h,intval) 
{ 
struct poly *tmp; 
tmp=h; 
while(tmp!=NULL) 
{if(tmp->exp==val) 
return 0; 
tmp=tmp->next; 
} 
return 1; 
} 
struct poly *dispose(struct poly *list) 
{ 
if(list==NULL) 
{ 
printf("List is already empty."); 
return list; 
} 
else 
{ 
temp=list; 
while(list!=NULL) 
{ 
free(temp); 
list=list->next; 
temp=list; 
} 
return list; 
} 
}
